# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:

        #builds list of leaf nodes when given a root
        def dfs(root, leafs):
            if root is None:
                return
            elif root.left is None and root.right is None:
                leafs.append(root.val)
            #recursive calls is not leaf node or end of tree
            dfs(root.left, leafs)
            dfs(root.right, leafs)
        
        leafs_tree1 = []
        leafs_tree2 = []

        dfs(root1, leafs_tree1)
        dfs(root2, leafs_tree2)

        #compare lists of leaf nodes generated by dfs algorithm
        return leafs_tree1 == leafs_tree2
            
        